---
- name: deploy VMs for k3s cluster   # edit vmname variable - use -l filter to specify cluster vs. full inventory
  hosts: all
  vars:
    - vmname: k3s1-
#    - ip: 192.168.1.200
    - image_url:
      - "https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img"
    - image_path: "/Users/davedemlow/tmp/" # ~/tmp/" #path to download file
  connection: local
  gather_facts: false
  #strategy: #free # free  #allows each cluster to start next task before all clusters have finished current task
  environment:  # if set here - hypercore modules will automatically use this for each remote cluster - avoiding need to specify cluster_instance for each test
    SC_HOST: "https://{{ hypercore_hostname }}"
    SC_USERNAME: "{{ scale_user }}"
    SC_PASSWORD: "{{ scale_pass }}"
  roles:
    - url2template
#TODO - check if host ip already online?

  tasks:
    - name: Generate 5 digit random character password using lower case ans set as variable named ran5
      ansible.builtin.set_fact:
        ran5: "{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=5') }}"

    - name: Clone and configure ad hoc "{{ vmname }} {{ran5}}"
      scale_computing.hypercore.vm_clone:
        vm_name: "{{ vmname }}{{ ran5 }}"
        source_vm_name: "{{ image_name }}"
        tags:
          - temp
        cloud_init:
          user_data: |
            #cloud-config
            password: "password"
            chpasswd: { expire: False }
            ssh_pwauth: True
            ssh_authorized_keys: # Add your ssh public key for publickey authentication
              - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDihWWhjoPj8KVLtdLDwNJQ71zi9An0iUFjefRWu2Eju ddemlow@scalecomputing.com
            disable_root: false
            ssh_import_id:  gh:ddemlow
            package_update: true
            package_upgrade: false
            packages: [qemu-guest-agent ]
            bootcmd:
              - [ sh, -c, 'sudo echo GRUB_CMDLINE_LINUX="nomodeset" >> /etc/default/grub' ]
              - [ sh, -c, 'sudo echo GRUB_GFXPAYLOAD_LINUX="1024x768" >> /etc/default/grub' ]
              - [ sh, -c, 'sudo echo GRUB_DISABLE_LINUX_UUID=true >> /etc/default/grub' ]
              - [ sh, -c, 'sudo update-grub' ]
            runcmd:
              - [ systemctl, restart, --no-block, qemu-guest-agent ]
              - [ systemctl, restart, --no-block, qemu-guest-agent ]
            write_files:
            final_message: |
              cloud-init has finished
              version: $version
              timestamp: $timestamp
              datasource: $datasource
              uptime: $uptime
          meta_data: |
            dsmode: local
            local-hostname: "{{ vmname }}{{ran5}}"
            network-interfaces: |
              auto lo
              iface lo inet loopback
              iface ens1 inet static
                address {{ inventory_hostname }}
                netmask 255.255.255.0
                gateway 192.168.1.1
                dns-nameservers 8.8.8.8
      throttle: 1  # prevents multiple clones from same source causing error

    - name: Disk desired configuration for "{{ vmname }}{{ran5}}"
      scale_computing.hypercore.vm_disk:
        vm_name: "{{ vmname }}{{ran5}}"
        items:
          - disk_slot: 1
            type: virtio_disk
            size: "{{ '300 GB' | human_to_bytes }}" # 50GB | human to bytes results in 53.7GB VSD in Hypercore
        state: present

    - name: Vm desired configuration and state for "{{ vmname }}{{ran5}}"
      scale_computing.hypercore.vm_params:
        vm_name: "{{vmname}}{{ran5}}"
        memory: "{{ '4 GB' | human_to_bytes }}"
        description:
        tags:
          - platform2024
          - "{{ site_name }}"
          - ansible_group__docker # this will create tag used by hypercore inventory plugin when executing towards VM hosts
          - SERIAL
        vcpu: 4
        power_state: start

    - name: wait for ssh connection to provisioned VMs
      ansible.builtin.wait_for_connection:
